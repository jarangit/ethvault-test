"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/deposit/page",{

/***/ "(app-pages-browser)/./components/web3-provider.tsx":
/*!**************************************!*\
  !*** ./components/web3-provider.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Provider: () => (/* binding */ Web3Provider),\n/* harmony export */   useWeb3: () => (/* binding */ useWeb3)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-jsonrpc.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/utils/units.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/ui/use-toast */ \"(app-pages-browser)/./components/ui/use-toast.ts\");\n/* harmony import */ var _lib_abis_dETH_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/abis/dETH.json */ \"(app-pages-browser)/./lib/abis/dETH.json\");\n/* harmony import */ var _lib_abis_sETH_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/abis/sETH.json */ \"(app-pages-browser)/./lib/abis/sETH.json\");\n/* harmony import */ var _lib_abis_governance_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/abis/governance.json */ \"(app-pages-browser)/./lib/abis/governance.json\");\n/* harmony import */ var _lib_abis_stakingDashboard_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/abis/stakingDashboard.json */ \"(app-pages-browser)/./lib/abis/stakingDashboard.json\");\n/* __next_internal_client_entry_do_not_use__ useWeb3,Web3Provider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Contract ABIs and addresses\n\n\n\n\n// Contract addresses\nconst DETH_ADDRESS = \"0x520d7dAB4A5bCE6ceA323470dbffCea14b78253a\";\nconst SETH_ADDRESS = \"0x16b0cD88e546a90DbE380A63EbfcB487A9A05D8e\";\nconst GOVERNANCE_ADDRESS = \"0xD396FE92075716598FAC875D12E708622339FA3e\";\nconst STAKING_DASHBOARD_ADDRESS = \"0xd33e9676463597AfFF5bB829796836631F4e2f1f\";\n// Holesky testnet configuration\nconst HOLESKY_CHAIN_ID = 17000;\nconst HOLESKY_RPC_URL = \"https://ethereum-holesky-rpc.publicnode.com\";\nconst Web3Context = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    account: null,\n    provider: null,\n    signer: null,\n    dETHContract: null,\n    sETHContract: null,\n    governanceContract: null,\n    stakingDashboardContract: null,\n    connectWallet: async ()=>{},\n    disconnectWallet: ()=>{},\n    isConnected: false,\n    chainId: null,\n    refreshBalances: async ()=>{},\n    networkName: \"\"\n});\nconst useWeb3 = ()=>{\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(Web3Context);\n};\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst Web3Provider = (param)=>{\n    let { children } = param;\n    _s1();\n    const [account, setAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [signer, setSigner] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [dETHContract, setDETHContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [sETHContract, setSETHContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [governanceContract, setGovernanceContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [stakingDashboardContract, setStakingDashboardContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [chainId, setChainId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [networkName, setNetworkName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [hasShownConnectToast, setHasShownConnectToast] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { toast } = (0,_components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast)();\n    // Function to get ETH balance directly from RPC\n    const getEthBalanceDirectly = async (address)=>{\n        try {\n            // Create direct RPC provider\n            const directProvider = new ethers__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider(HOLESKY_RPC_URL);\n            // Get balance\n            const balance = await directProvider.getBalance(address);\n            console.log(\"Direct ETH Balance check:\", ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(balance), \"ETH\");\n            return ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(balance);\n        } catch (error) {\n            console.error(\"Error getting direct ETH balance:\", error);\n            return \"0\";\n        }\n    };\n    // Ensure contracts are connected with the correct signer\n    const connectWallet = async ()=>{\n        if ( true && window.ethereum) {\n            try {\n                console.log(\"Connecting wallet...\");\n                // Request account access\n                const accounts = await window.ethereum.request({\n                    method: \"eth_requestAccounts\"\n                });\n                const userAddress = accounts[0];\n                console.log(\"Connected account:\", userAddress);\n                // Check current chain ID\n                const chainIdHex = await window.ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                const currentChainId = Number.parseInt(chainIdHex, 16);\n                console.log(\"Current chain ID:\", currentChainId);\n                // If not on the correct network, ask user to switch\n                if (currentChainId !== HOLESKY_CHAIN_ID) {\n                    console.log(\"Not on the correct network, attempting to switch...\");\n                    try {\n                        // Try to switch to the correct network\n                        await window.ethereum.request({\n                            method: \"wallet_switchEthereumChain\",\n                            params: [\n                                {\n                                    chainId: \"0x\".concat(HOLESKY_CHAIN_ID.toString(16))\n                                }\n                            ]\n                        });\n                        console.log(\"Successfully switched network\");\n                    } catch (switchError) {\n                        // If network hasn't been added, add it to wallet\n                        if (switchError.code === 4902) {\n                            console.log(\"Network not found, adding network...\");\n                            await window.ethereum.request({\n                                method: \"wallet_addEthereumChain\",\n                                params: [\n                                    {\n                                        chainId: \"0x\".concat(HOLESKY_CHAIN_ID.toString(16)),\n                                        chainName: \"Ethereum Testnet\",\n                                        nativeCurrency: {\n                                            name: \"ETH\",\n                                            symbol: \"ETH\",\n                                            decimals: 18\n                                        },\n                                        rpcUrls: [\n                                            HOLESKY_RPC_URL\n                                        ],\n                                        blockExplorerUrls: [\n                                            \"https://holesky.etherscan.io\"\n                                        ]\n                                    }\n                                ]\n                            });\n                            console.log(\"Network added\");\n                        } else {\n                            throw switchError;\n                        }\n                    }\n                }\n                // Create direct provider to RPC for reliable connection\n                const directProvider = new ethers__WEBPACK_IMPORTED_MODULE_7__.JsonRpcProvider(HOLESKY_RPC_URL);\n                console.log(\"Created direct provider to RPC\");\n                // Create browser provider for wallet interaction\n                const browserProvider = new ethers__WEBPACK_IMPORTED_MODULE_9__.BrowserProvider(window.ethereum);\n                console.log(\"Created browser provider\");\n                // Get signer from browser provider\n                const web3Signer = await browserProvider.getSigner();\n                console.log(\"Got signer:\", await web3Signer.getAddress());\n                // Get network information\n                const network = await directProvider.getNetwork();\n                console.log(\"Network info:\", network.name, network.chainId);\n                setNetworkName(\"Connected\");\n                setAccount(userAddress);\n                setProvider(directProvider);\n                setSigner(web3Signer);\n                setIsConnected(true);\n                setChainId(Number(network.chainId));\n                // Print contract addresses for debugging\n                console.log(\"Contract addresses:\", {\n                    dETH: DETH_ADDRESS,\n                    sETH: SETH_ADDRESS,\n                    governance: GOVERNANCE_ADDRESS,\n                    stakingDashboard: STAKING_DASHBOARD_ADDRESS\n                });\n                try {\n                    // Initialize contracts with correct signer\n                    const dETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(DETH_ADDRESS, _lib_abis_dETH_json__WEBPACK_IMPORTED_MODULE_3__, web3Signer);\n                    console.log(\"dETH contract initialized:\", dETH.target);\n                    const sETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(SETH_ADDRESS, _lib_abis_sETH_json__WEBPACK_IMPORTED_MODULE_4__, web3Signer);\n                    console.log(\"sETH contract initialized:\", sETH.target);\n                    const governance = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(GOVERNANCE_ADDRESS, _lib_abis_governance_json__WEBPACK_IMPORTED_MODULE_5__, web3Signer);\n                    console.log(\"Governance contract initialized:\", governance.target);\n                    const stakingDashboard = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(STAKING_DASHBOARD_ADDRESS, _lib_abis_stakingDashboard_json__WEBPACK_IMPORTED_MODULE_6__, web3Signer);\n                    console.log(\"StakingDashboard contract initialized:\", stakingDashboard.target);\n                    setDETHContract(dETH);\n                    setSETHContract(sETH);\n                    setGovernanceContract(governance);\n                    setStakingDashboardContract(stakingDashboard);\n                    console.log(\"🚀 ~ connectWallet ~ stakingDashboard:\", stakingDashboard);\n                } catch (contractError) {\n                    console.error(\"Error initializing contracts:\", contractError);\n                    toast({\n                        title: \"Contract Initialization Error\",\n                        description: \"There was an error initializing the smart contracts.\",\n                        variant: \"destructive\"\n                    });\n                }\n                // Get ETH balance directly from RPC\n                const directBalance = await getEthBalanceDirectly(userAddress);\n                console.log(\"Set ETH balance to:\", directBalance);\n                // Get dETH and sETH balances if contracts are available\n                try {\n                    const dETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(DETH_ADDRESS, _lib_abis_dETH_json__WEBPACK_IMPORTED_MODULE_3__, directProvider);\n                    const dETHBal = await dETH.balanceOf(userAddress);\n                    console.log(\"dETH balance:\", ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(dETHBal));\n                } catch (error) {\n                    console.error(\"Error getting dETH balance:\", error);\n                }\n                try {\n                    const sETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(SETH_ADDRESS, _lib_abis_sETH_json__WEBPACK_IMPORTED_MODULE_4__, directProvider);\n                    const sETHBal = await sETH.balanceOf(userAddress);\n                    console.log(\"sETH balance:\", ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(sETHBal));\n                } catch (error) {\n                    console.error(\"Error getting sETH balance:\", error);\n                }\n                // Only show toast when first connected\n                if (!hasShownConnectToast) {\n                    toast({\n                        title: \"Wallet Connected\",\n                        description: \"Connected to \".concat(userAddress.substring(0, 6), \"...\").concat(userAddress.substring(38))\n                    });\n                    setHasShownConnectToast(true);\n                }\n            } catch (error) {\n                console.error(\"Error connecting wallet:\", error);\n                toast({\n                    title: \"Connection Failed\",\n                    description: \"Failed to connect wallet. Please try again.\",\n                    variant: \"destructive\"\n                });\n            }\n        } else {\n            toast({\n                title: \"Metamask Not Found\",\n                description: \"Please install Metamask to use this application\",\n                variant: \"destructive\"\n            });\n        }\n    };\n    const disconnectWallet = ()=>{\n        setAccount(null);\n        setSigner(null);\n        setIsConnected(false);\n        setHasShownConnectToast(false);\n        toast({\n            title: \"Wallet Disconnected\",\n            description: \"Your wallet has been disconnected.\"\n        });\n    };\n    const refreshBalances = async ()=>{\n        if (account) {\n            try {\n                console.log(\"Refreshing balances for account:\", account);\n                // Get ETH balance directly from RPC\n                const directBalance = await getEthBalanceDirectly(account);\n                console.log(\"Updated ETH balance:\", directBalance);\n                // Get dETH balance if contract is available\n                if (provider) {\n                    try {\n                        const dETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(DETH_ADDRESS, _lib_abis_dETH_json__WEBPACK_IMPORTED_MODULE_3__, provider);\n                        const dETHBal = await dETH.balanceOf(account);\n                        console.log(\"Updated dETH balance:\", ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(dETHBal));\n                    } catch (error) {\n                        console.error(\"Error refreshing dETH balance:\", error);\n                    }\n                }\n                // Get sETH balance if contract is available\n                if (provider) {\n                    try {\n                        const sETH = new ethers__WEBPACK_IMPORTED_MODULE_10__.Contract(SETH_ADDRESS, _lib_abis_sETH_json__WEBPACK_IMPORTED_MODULE_4__, provider);\n                        const sETHBal = await sETH.balanceOf(account);\n                        console.log(\"Updated sETH balance:\", ethers__WEBPACK_IMPORTED_MODULE_8__.formatEther(sETHBal));\n                    } catch (error) {\n                        console.error(\"Error refreshing sETH balance:\", error);\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error refreshing balances:\", error);\n            }\n        }\n    };\n    // Listen for account changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            if ( true && window.ethereum) {\n                window.ethereum.on(\"accountsChanged\", {\n                    \"Web3Provider.useEffect\": async (accounts)=>{\n                        console.log(\"Account changed:\", accounts);\n                        if (accounts.length > 0) {\n                            setAccount(accounts[0]);\n                            // Get ETH balance directly from RPC\n                            const directBalance = await getEthBalanceDirectly(accounts[0]);\n                            console.log(\"Updated ETH balance after account change:\", directBalance);\n                            refreshBalances();\n                        } else {\n                            setAccount(null);\n                            setIsConnected(false);\n                            setHasShownConnectToast(false);\n                        }\n                    }\n                }[\"Web3Provider.useEffect\"]);\n                // Add listener for chain changes\n                window.ethereum.on(\"chainChanged\", {\n                    \"Web3Provider.useEffect\": async (chainId)=>{\n                        const newChainId = Number.parseInt(chainId, 16);\n                        console.log(\"Chain changed to:\", newChainId);\n                        setChainId(newChainId);\n                        if (newChainId !== HOLESKY_CHAIN_ID) {\n                            toast({\n                                title: \"Wrong Network\",\n                                description: \"Please switch to the correct network\",\n                                variant: \"destructive\"\n                            });\n                            setIsConnected(false);\n                            setNetworkName(\"\");\n                            setHasShownConnectToast(false);\n                        } else {\n                            setNetworkName(\"Connected\");\n                            if (account) {\n                                // If there's already a connected account, refresh data\n                                const directBalance = await getEthBalanceDirectly(account);\n                                console.log(\"Updated ETH balance after chain change:\", directBalance);\n                                refreshBalances();\n                            }\n                        }\n                    }\n                }[\"Web3Provider.useEffect\"]);\n            }\n            return ({\n                \"Web3Provider.useEffect\": ()=>{\n                    if ( true && window.ethereum) {\n                        window.ethereum.removeAllListeners();\n                    }\n                }\n            })[\"Web3Provider.useEffect\"];\n        }\n    }[\"Web3Provider.useEffect\"], [\n        account\n    ]);\n    // Auto connect if previously connected\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            const checkConnection = {\n                \"Web3Provider.useEffect.checkConnection\": async ()=>{\n                    if ( true && window.ethereum) {\n                        try {\n                            const accounts = await window.ethereum.request({\n                                method: \"eth_accounts\"\n                            });\n                            if (accounts.length > 0) {\n                                console.log(\"Auto-connecting previously connected account\");\n                                connectWallet();\n                            }\n                        } catch (error) {\n                            console.error(\"Error checking connection:\", error);\n                        }\n                    }\n                }\n            }[\"Web3Provider.useEffect.checkConnection\"];\n            checkConnection();\n        }\n    }[\"Web3Provider.useEffect\"], []);\n    // Refresh balances periodically\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            let intervalId;\n            if (isConnected && account) {\n                // Refresh balances every 15 seconds\n                intervalId = setInterval({\n                    \"Web3Provider.useEffect\": ()=>{\n                        console.log(\"Periodic balance refresh\");\n                        refreshBalances();\n                    }\n                }[\"Web3Provider.useEffect\"], 15000);\n            }\n            return ({\n                \"Web3Provider.useEffect\": ()=>{\n                    if (intervalId) {\n                        clearInterval(intervalId);\n                    }\n                }\n            })[\"Web3Provider.useEffect\"];\n        }\n    }[\"Web3Provider.useEffect\"], [\n        isConnected,\n        account\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Web3Context.Provider, {\n        value: {\n            account,\n            provider,\n            signer,\n            dETHContract,\n            sETHContract,\n            governanceContract,\n            stakingDashboardContract,\n            connectWallet,\n            disconnectWallet,\n            isConnected,\n            chainId,\n            refreshBalances,\n            networkName\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/jaran/Documents/develop/personal/jobs/ethvault/components/web3-provider.tsx\",\n        lineNumber: 396,\n        columnNumber: 5\n    }, undefined);\n};\n_s1(Web3Provider, \"/mJid54FAMo+P/U0os2J3KoTqk0=\", false, function() {\n    return [\n        _components_ui_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast\n    ];\n});\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/web3-provider.tsx\n"));

/***/ })

});